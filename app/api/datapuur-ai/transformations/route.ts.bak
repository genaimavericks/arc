import { NextResponse } from 'next/server'
import { getApiBaseUrl } from '@/lib/config'

// Must use force-static for Next.js static export compatibility
export const dynamic = 'force-static'
export const revalidate = 0 // Zero for immediately revalidating during requests

// Define transformation plan type
interface TransformationPlan {
  id: string;
  name: string;
  description: string;
  status: string;
  created_at?: string;
  updated_at?: string | null;
  transformation_steps?: Array<any>;
  output_file_path?: string | null;
}

// Emergency fallback empty array for build time and errors
const EMPTY_PLANS: TransformationPlan[] = []

/**
 * GET handler for transformation plans
 * - At build time: Returns empty plans array for static export compatibility
 * - At runtime: Fetches real transformation plans from backend API
 */
export async function GET(request: Request) {
  // For static export or build time, return empty array for static export compatibility
  if (process.env.NODE_ENV === 'development' || process.env.NEXT_PHASE === 'phase-production-build') {
    return NextResponse.json({ plans: [] }, { 
      status: 200, 
      headers: { 'X-Static-Export': 'true' } 
    })
  }

  try {
    // Get authorization header for JWT token
    const authorization = request.headers.get('authorization')
    if (!authorization) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get pagination parameters
    const url = new URL(request.url)
    const page = url.searchParams.get('page') || '1'
    const limit = url.searchParams.get('limit') || '10'
    
    // Call the backend API with authorization header
    const apiBaseUrl = getApiBaseUrl()
    const response = await fetch(
      `${apiBaseUrl}/api/datapuur-ai/transformations?page=${page}&limit=${limit}`,
      { headers: { Authorization: authorization, 'Content-Type': 'application/json' } }
    )

    if (!response.ok) {
      throw new Error(`Backend API error: ${response.status} ${response.statusText}`)
    }

    // Return the data from the backend
    const data = await response.json()
    
    // For backward compatibility, wrap the plans array in a 'plans' property
    // if the API returns just an array
    return NextResponse.json(
      Array.isArray(data) ? { plans: data } : data
    )
  } catch (error: any) {
    console.error('Error fetching transformation plans:', error)
    return NextResponse.json(
      { error: 'Failed to fetch transformation plans', details: error.message },
      { status: 500 }
    )
  }
}

// POST method to create a transformation plan
export async function POST(request: Request) {
  // For static export, return a mock response during build time
  if (process.env.NODE_ENV === 'development' || process.env.NEXT_PHASE === 'phase-production-build') {
    return NextResponse.json({ 
      id: 'mock-id',
      name: 'New Transformation Plan',
      description: 'Created via API',
      status: 'pending',
      created_at: new Date().toISOString(),
      updated_at: null,
      transformation_steps: [],
      output_file_path: null
    }, { 
      status: 201,
      headers: {
        'X-Static-Export': 'true'
      }
    });
  }

  try {
    // Get the request body
    const body = await request.json();
    console.log('Request body:', body);
    
    // Get authorization header
    const authorization = request.headers.get('authorization');
    if (!authorization) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    console.log('Authorization header present:', !!authorization);

    // Forward request to backend API
    const apiBaseUrl = getApiBaseUrl();
    
    // getApiBaseUrl() already strips the /api suffix if present, so we need to ensure we include it
    // The FastAPI router has prefix="/api/datapuur-ai", so we need the full path
    const transformationsEndpoint = `${apiBaseUrl}/api/datapuur-ai/transformations`;
    
    // Extensive logging for debugging the URL construction
    console.log('API base URL:', apiBaseUrl);
    console.log('Complete endpoint URL:', transformationsEndpoint);
    console.log('Authorization header format:', authorization ? 'Bearer token present' : 'No authorization header');
    console.log('Sending request to backend at:', transformationsEndpoint);
    
    const response = await fetch(transformationsEndpoint, {
      method: 'POST',
      headers: {
        'Authorization': authorization,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Backend API error: ${response.status} ${response.statusText}`, errorText);
      console.error(`Request URL: ${apiBaseUrl}/api/datapuur-ai/transformations`);
      return NextResponse.json(
        { error: `Backend error: ${response.statusText}`, details: errorText },
        { status: response.status }
      );
    }

    // Return the data from the backend
    const data = await response.json();
    return NextResponse.json(data, { status: 201 });
  } catch (error: any) {
    console.error('Error creating transformation plan:', error);
    return NextResponse.json(
      { error: 'Failed to create transformation plan', details: error.message },
      { status: 500 }
    );
  }
}
