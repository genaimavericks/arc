#!/bin/bash

# RSW Application Packager
# This script creates a deployable package of the RSW application

# Exit on any error
set -e

echo "=== RSW Application Packager ==="
echo "Building deployable package..."

# Create package directory structure
echo "Creating package directory structure..."
rm -rf package
mkdir -p package/config
mkdir -p package/dist
mkdir -p package/data

# Copy configuration templates
echo "Copying configuration templates..."
if [ -f api/env.example ]; then
  cp api/env.example package/config/.env.template
else
  echo "WARNING: env.example not found in api folder. Creating empty template."
  touch package/config/.env.template
fi

# Create a default .env file with the correct API URL
echo "Creating default .env configuration..."
cat > package/config/.env << EOF
# Default configuration - Edit as needed
NEXT_PUBLIC_API_URL=http://172.105.77.119:9090
DB_TYPE=sqlite
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=
DB_NAME=rsw
EOF

NEXT_PUBLIC_API_URL=http://172.105.77.119:9090
echo "Using API URL for build: ${NEXT_PUBLIC_API_URL}"

# Copy .env.production.sample if it exists
if [ -f .env.production.sample ]; then
  cp .env.production.sample package/config/.env.production.sample
fi

# Copy scripts if they exist
if [ -d scripts ]; then
  cp -r scripts package/scripts
fi


# Copy frontend assets
echo "Copying frontend assets..."
if [ ! -d "api/static" ] || [ ! -f "api/static/index.html" ]; then
  echo "Static files not found. Building frontend..."
  bash build-frontend.sh
fi

# Copy static files to package
echo "Copying static files to package..."
mkdir -p package/api/static
cp -r api/static/* package/api/static/

# Create a runtime configuration file that will override the API URL
echo "Creating runtime configuration file with server IP..."
cat > package/api/static/config.js << EOF
// Runtime configuration for RSW application
// This file is automatically generated during the build process
window.__RSW_CONFIG__ = {
  apiBaseUrl: "http://172.105.77.119:9090"
};
EOF

# Update HTML files in the package to include the config.js script if not already included
echo "Ensuring HTML files include runtime configuration..."
for htmlfile in package/api/static/*.html; do
  if [ -f "$htmlfile" ]; then
    # Check if config.js is already included
    if ! grep -q "config.js" "$htmlfile"; then
      # Insert the script tag before the first existing script tag
      sed -i '' 's/<script/<script src="\/config.js"><\/script>\n<script/' "$htmlfile"
    fi
  fi
done

# Copy backend code
echo "Copying backend code..."
if [ -d api ]; then
  # Create the package with the correct structure
  cp -r api package/
  
 
else
  echo "ERROR: API directory not found."
  exit 1
fi

# Copy requirements
if [ -f api/requirements.txt ]; then
  cp api/requirements.txt package/
else
  echo "WARNING: requirements.txt not found in api folder. Creating empty file."
  touch package/requirements.txt
fi

# Create deployment script
echo "Creating deployment scripts..."
cat > package/deploy.sh << 'EOF'
#!/bin/bash

# Configuration
APP_DIR=$(pwd)
CONFIG_FILE="$APP_DIR/config/.env"

# Check if configuration exists
if [ ! -f "$CONFIG_FILE" ]; then
  echo "Creating configuration file from template..."
  cp "$APP_DIR/config/.env.template" "$CONFIG_FILE"
  echo "Please edit $CONFIG_FILE with your settings"
  echo "Then run this script again"
  exit 1
fi

# Set up Python environment
echo "Setting up Python environment..."
python3 -m venv .venv
source .venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt

# Create necessary directories
echo "Creating necessary directories..."
mkdir -p uploads
mkdir -p data

# Set proper permissions
echo "Setting proper permissions..."
chmod +x start.sh

# Database setup
echo "Setting up database..."
source .venv/bin/activate

# Load environment variables to determine database type
set -a
if [ -f config/.env ]; then
  export $(grep -v '^#' config/.env | grep -v '^$' | xargs)
fi
set +a

# Check if using PostgreSQL and if database exists
if [ "${DB_TYPE,,}" = "postgresql" ] || [ "${DB_TYPE,,}" = "postgres" ]; then
  echo "PostgreSQL database selected."
  echo "Please ensure your PostgreSQL server is running and the database is created."
  echo "Database configuration:"
  echo "  Host: ${DB_HOST:-localhost}"
  echo "  Port: ${DB_PORT:-5432}"
  echo "  User: ${DB_USER}"
  echo "  Database: ${DB_NAME}"
else
  echo "SQLite database selected. The database file will be created automatically."
  mkdir -p data/sqlite
fi

echo "RSW application is ready to start!"
echo "Run ./start.sh to launch the application"
EOF

chmod +x package/deploy.sh

# Create start script
cat > package/start.sh << 'EOF'
#!/bin/bash

# Load environment variables (skip comments and empty lines)
set -a
if [ -f config/.env ]; then
  # This approach works reliably across different shells and distros
  export $(grep -v '^#' config/.env | grep -v '^$' | xargs)
fi
set +a

# Set default environment variables if not in .env
export HOST=${HOST:-172.105.77.119}
export PORT=${PORT:-9090}

# Important: Only set NEXT_PUBLIC_API_URL if it's not already defined
# This preserves the value from the config file which is critical for proper API routing
if [ -z "$NEXT_PUBLIC_API_URL" ]; then
  echo "Warning: NEXT_PUBLIC_API_URL not set in config. Using default: http://${HOST}:${PORT}"
  export NEXT_PUBLIC_API_URL="http://${HOST}:${PORT}"
else
  echo "Using API URL: ${NEXT_PUBLIC_API_URL}"
fi

# Database configuration defaults
export DB_TYPE=${DB_TYPE:-sqlite}
export DB_HOST=${DB_HOST:-localhost}
export DB_PORT=${DB_PORT:-5432}
export DB_USER=${DB_USER:-postgres}
export DB_NAME=${DB_NAME:-rsw}

# Start the application
echo "Starting RSW application..."
source .venv/bin/activate

echo "Using database type: ${DB_TYPE}"
if [ "${DB_TYPE,,}" = "postgresql" ] || [ "${DB_TYPE,,}" = "postgres" ]; then
  echo "PostgreSQL configuration:"
  echo "  Host: ${DB_HOST}"
  echo "  Port: ${DB_PORT}"
  echo "  User: ${DB_USER}"
  echo "  Database: ${DB_NAME}"
else
  echo "SQLite database will be used"
fi

# Check if we're in the right directory structure
if [ -d "api" ]; then
  python -m uvicorn api.main:app --host "$HOST" --port "$PORT"
else
  # If we're already in the package directory
  cd ..
  python -m uvicorn api.main:app --host "$HOST" --port "$PORT"
fi
EOF

chmod +x package/start.sh


# Copy package README
cp PACKAGE_README.md package/README.md


# Create archive
echo "Creating deployment archive..."
tar -czf rsw-deployment.tar.gz package/

echo "=== Package created successfully ==="
echo "Deployment archive: rsw-deployment.tar.gz"
echo "See PACKAGE_README.md for deployment instructions"
echo ""
echo "Database Configuration:"
echo "  - The package supports both SQLite and PostgreSQL databases"
echo "  - Set DB_TYPE in config/.env to 'sqlite' or 'postgresql'"
echo "  - For PostgreSQL, also set DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, and DB_NAME"
echo "  - A migration script is included to transfer data from SQLite to PostgreSQL"
