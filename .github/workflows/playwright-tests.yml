name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    services:
      # Add PostgreSQL service if needed
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rsw_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps
        cd api && pip install -r requirements.txt && cd ..
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Create test data
      run: mkdir -p test-data/datasets
    
    - name: Build frontend
      run: npm run build
    
    - name: Start backend server
      run: |
        cd api
        python -m pytest -xvs
        nohup python main.py &
        echo $! > backend.pid
        cd ..
        sleep 5
    
    - name: Run Playwright tests
      run: npm run test
      env:
        CI: true
        TEST_BASE_URL: http://localhost:3000
        TEST_API_URL: http://localhost:8000/api
        DB_TYPE: postgresql
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: rsw_test
    
    - name: Upload Playwright test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
    
    - name: Stop backend server
      if: always()
      run: kill $(cat api/backend.pid) || true
